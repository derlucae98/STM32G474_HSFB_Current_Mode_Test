
HRTIM_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004120  08004120  00005120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000020  08004184  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004184  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116df  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd0  00000000  00000000  0001772f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00019700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  0001a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027212  00000000  00000000  0001b0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107cf  00000000  00000000  000422e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109a0b  00000000  00000000  00052ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c4be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  0015c504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001602e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004108 	.word	0x08004108

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004108 	.word	0x08004108

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fca0 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f83a 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f9ba 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f98e 	bl	8000874 <MX_DMA_Init>
  MX_HRTIM1_Init();
 8000558:	f000 f880 	bl	800065c <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Enable HRTIM's outputs TA1 and start Timer A */
    HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1);  // Enable the generation of the waveform signal on the designated output
 800055c:	2101      	movs	r1, #1
 800055e:	4817      	ldr	r0, [pc, #92]	@ (80005bc <main+0x78>)
 8000560:	f001 fdad 	bl	80020be <HAL_HRTIM_WaveformOutputStart>
    HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA2);  // Enable the generation of the waveform signal on the designated output
 8000564:	2102      	movs	r1, #2
 8000566:	4815      	ldr	r0, [pc, #84]	@ (80005bc <main+0x78>)
 8000568:	f001 fda9 	bl	80020be <HAL_HRTIM_WaveformOutputStart>
    HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);  // Start the counter of the Timer A operating in waveform mode
 800056c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000570:	4812      	ldr	r0, [pc, #72]	@ (80005bc <main+0x78>)
 8000572:	f001 fdd1 	bl	8002118 <HAL_HRTIM_WaveformCountStart>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fb10 	bl	8000b9c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800057c:	2101      	movs	r1, #1
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fb42 	bl	8000c08 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <main+0x7c>)
 8000586:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800058a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <main+0x7c>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <main+0x7c>)
 8000594:	2200      	movs	r2, #0
 8000596:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <main+0x7c>)
 800059a:	2200      	movs	r2, #0
 800059c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <main+0x7c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005a4:	4906      	ldr	r1, [pc, #24]	@ (80005c0 <main+0x7c>)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fbba 	bl	8000d20 <BSP_COM_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <main+0x74>
  {
    Error_Handler();
 80005b2:	f000 f9c5 	bl	8000940 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x74>
 80005bc:	2000004c 	.word	0x2000004c
 80005c0:	2000003c 	.word	0x2000003c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	2238      	movs	r2, #56	@ 0x38
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fd6b 	bl	80040ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f002 fa0a 	bl	8002a00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2340      	movs	r3, #64	@ 0x40
 80005f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000602:	2304      	movs	r3, #4
 8000604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000606:	2355      	movs	r3, #85	@ 0x55
 8000608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	4618      	mov	r0, r3
 800061c:	f002 faa4 	bl	8002b68 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000626:	f000 f98b 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fda2 	bl	800318c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800064e:	f000 f977 	bl	8000940 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0ae      	sub	sp, #184	@ 0xb8
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000662:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000670:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000684:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000688:	2260      	movs	r2, #96	@ 0x60
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fd0e 	bl	80040ae <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2220      	movs	r2, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fd02 	bl	80040ae <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80006aa:	4b70      	ldr	r3, [pc, #448]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006ac:	4a70      	ldr	r2, [pc, #448]	@ (8000870 <MX_HRTIM1_Init+0x214>)
 80006ae:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80006b0:	4b6e      	ldr	r3, [pc, #440]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80006b6:	4b6d      	ldr	r3, [pc, #436]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80006bc:	486b      	ldr	r0, [pc, #428]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006be:	f001 f91b 	bl	80018f8 <HAL_HRTIM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_HRTIM1_Init+0x70>
  {
    Error_Handler();
 80006c8:	f000 f93a 	bl	8000940 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80006cc:	210c      	movs	r1, #12
 80006ce:	4867      	ldr	r0, [pc, #412]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006d0:	f001 f9e2 	bl	8001a98 <HAL_HRTIM_DLLCalibrationStart>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_HRTIM1_Init+0x82>
  {
    Error_Handler();
 80006da:	f000 f931 	bl	8000940 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80006de:	210a      	movs	r1, #10
 80006e0:	4862      	ldr	r0, [pc, #392]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80006e2:	f001 fa31 	bl	8001b48 <HAL_HRTIM_PollForDLLCalibration>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_HRTIM1_Init+0x94>
  {
    Error_Handler();
 80006ec:	f000 f928 	bl	8000940 <Error_Handler>
  }
  pTimeBaseCfg.Period = 5440;
 80006f0:	f44f 53aa 	mov.w	r3, #5440	@ 0x1540
 80006f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000704:	2308      	movs	r3, #8
 8000706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800070a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800070e:	461a      	mov	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	4856      	ldr	r0, [pc, #344]	@ (800086c <MX_HRTIM1_Init+0x210>)
 8000714:	f001 fa4c 	bl	8001bb0 <HAL_HRTIM_TimeBaseConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_HRTIM1_Init+0xc6>
  {
    Error_Handler();
 800071e:	f000 f90f 	bl	8000940 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800073a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800073e:	461a      	mov	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	484a      	ldr	r0, [pc, #296]	@ (800086c <MX_HRTIM1_Init+0x210>)
 8000744:	f001 fae9 	bl	8001d1a <HAL_HRTIM_WaveformTimerControl>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_HRTIM1_Init+0xf6>
  {
    Error_Handler();
 800074e:	f000 f8f7 	bl	8000940 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2;
 8000752:	2302      	movs	r3, #2
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_CMP2;
 8000756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8000764:	2301      	movs	r3, #1
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000768:	2300      	movs	r3, #0
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800076c:	2300      	movs	r3, #0
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000770:	2300      	movs	r3, #0
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000774:	2300      	movs	r3, #0
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000778:	2300      	movs	r3, #0
 800077a:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800077c:	2300      	movs	r3, #0
 800077e:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000780:	2300      	movs	r3, #0
 8000782:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000784:	2300      	movs	r3, #0
 8000786:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000788:	2300      	movs	r3, #0
 800078a:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_ENABLED;
 800078c:	2340      	movs	r3, #64	@ 0x40
 800078e:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000794:	2300      	movs	r3, #0
 8000796:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000798:	2300      	movs	r3, #0
 800079a:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800079c:	2300      	movs	r3, #0
 800079e:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80007b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ba:	461a      	mov	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	482b      	ldr	r0, [pc, #172]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80007c0:	f001 fa1e 	bl	8001c00 <HAL_HRTIM_WaveformTimerConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80007ca:	f000 f8b9 	bl	8000940 <Error_Handler>
  }
  pCompareCfg.CompareValue = 96;
 80007ce:	2360      	movs	r3, #96	@ 0x60
 80007d0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2201      	movs	r2, #1
 80007d8:	2100      	movs	r1, #0
 80007da:	4824      	ldr	r0, [pc, #144]	@ (800086c <MX_HRTIM1_Init+0x210>)
 80007dc:	f001 fad0 	bl	8001d80 <HAL_HRTIM_WaveformCompareConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_HRTIM1_Init+0x18e>
  {
    Error_Handler();
 80007e6:	f000 f8ab 	bl	8000940 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFDF;
 80007ea:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 80007ee:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	2202      	movs	r2, #2
 80007fe:	2100      	movs	r1, #0
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <MX_HRTIM1_Init+0x210>)
 8000802:	f001 fabd 	bl	8001d80 <HAL_HRTIM_WaveformCompareConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 800080c:	f000 f898 	bl	8000940 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8000814:	2304      	movs	r3, #4
 8000816:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000818:	2308      	movs	r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2201      	movs	r2, #1
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_HRTIM1_Init+0x210>)
 8000838:	f001 fc10 	bl	800205c <HAL_HRTIM_WaveformOutputConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_HRTIM1_Init+0x1ea>
  {
    Error_Handler();
 8000842:	f000 f87d 	bl	8000940 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	2202      	movs	r2, #2
 800084a:	2100      	movs	r1, #0
 800084c:	4807      	ldr	r0, [pc, #28]	@ (800086c <MX_HRTIM1_Init+0x210>)
 800084e:	f001 fc05 	bl	800205c <HAL_HRTIM_WaveformOutputConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_HRTIM1_Init+0x200>
  {
    Error_Handler();
 8000858:	f000 f872 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800085c:	4803      	ldr	r0, [pc, #12]	@ (800086c <MX_HRTIM1_Init+0x210>)
 800085e:	f000 f8e7 	bl	8000a30 <HAL_HRTIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	37b8      	adds	r7, #184	@ 0xb8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000004c 	.word	0x2000004c
 8000870:	40016800 	.word	0x40016800

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	4a11      	ldr	r2, [pc, #68]	@ (80008c4 <MX_DMA_Init+0x50>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6493      	str	r3, [r2, #72]	@ 0x48
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_DMA_Init+0x50>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <MX_DMA_Init+0x50>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6493      	str	r3, [r2, #72]	@ 0x48
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	200c      	movs	r0, #12
 80008b0:	f000 fc37 	bl	8001122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008b4:	200c      	movs	r0, #12
 80008b6:	f000 fc4e 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_GPIO_Init+0x74>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a1a      	ldr	r2, [pc, #104]	@ (800093c <MX_GPIO_Init+0x74>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_GPIO_Init+0x74>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_GPIO_Init+0x74>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a14      	ldr	r2, [pc, #80]	@ (800093c <MX_GPIO_Init+0x74>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_GPIO_Init+0x74>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_GPIO_Init+0x74>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <MX_GPIO_Init+0x74>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_GPIO_Init+0x74>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_GPIO_Init+0x74>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <MX_GPIO_Init+0x74>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_GPIO_Init+0x74>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	@ 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000982:	f002 f8e1 	bl	8002b48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <HAL_HRTIM_MspInit+0x8c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d137      	bne.n	8000a16 <HAL_HRTIM_MspInit+0x82>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <HAL_HRTIM_MspInit+0x90>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <HAL_HRTIM_MspInit+0x90>)
 80009ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_HRTIM_MspInit+0x90>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel2;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <HAL_HRTIM_MspInit+0x98>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009c6:	2260      	movs	r2, #96	@ 0x60
 80009c8:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e4:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ea:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_NORMAL;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 80009fa:	f000 fbc7 	bl	800118c <HAL_DMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_HRTIM_MspInit+0x74>
    {
      Error_Handler();
 8000a04:	f7ff ff9c 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hhrtim,hdmaTimerA,hdma_hrtim1_a);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 8000a0c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <HAL_HRTIM_MspInit+0x94>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40016800 	.word	0x40016800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	20000148 	.word	0x20000148
 8000a2c:	4002001c 	.word	0x4002001c

08000a30 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <HAL_HRTIM_MspPostInit+0x68>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d11d      	bne.n	8000a8e <HAL_HRTIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000a7c:	230d      	movs	r3, #13
 8000a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f000 fd9b 	bl	80015c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40016800 	.word	0x40016800
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 fa1b 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <DMA1_Channel2_IRQHandler+0x10>)
 8000b06:	f000 fbe9 	bl	80012dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000148 	.word	0x20000148

08000b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f8e3 	bl	8000ce4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff ffea 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 faa3 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fce3 	bl	8000544 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b8c:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000b90:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b94:	20000248 	.word	0x20000248

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>
	...

08000b9c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <BSP_LED_Init+0x64>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a15      	ldr	r2, [pc, #84]	@ (8000c00 <BSP_LED_Init+0x64>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <BSP_LED_Init+0x64>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <BSP_LED_Init+0x68>)
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fcf1 	bl	80015c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <BSP_LED_Init+0x68>)
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	2120      	movs	r1, #32
 8000bec:	2200      	movs	r2, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fe6a 	bl	80018c8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	20000004 	.word	0x20000004

08000c08 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000c18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <BSP_PB_Init+0xc4>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ccc <BSP_PB_Init+0xc4>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c24:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <BSP_PB_Init+0xc4>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c36:	2302      	movs	r3, #2
 8000c38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10c      	bne.n	8000c5e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a21      	ldr	r2, [pc, #132]	@ (8000cd0 <BSP_PB_Init+0xc8>)
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fcb4 	bl	80015c4 <HAL_GPIO_Init>
 8000c5c:	e031      	b.n	8000cc2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c62:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd0 <BSP_PB_Init+0xc8>)
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fca6 	bl	80015c4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <BSP_PB_Init+0xcc>)
 8000c7e:	441a      	add	r2, r3
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4915      	ldr	r1, [pc, #84]	@ (8000cd8 <BSP_PB_Init+0xd0>)
 8000c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f000 fc55 	bl	800153a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <BSP_PB_Init+0xcc>)
 8000c96:	1898      	adds	r0, r3, r2
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4a10      	ldr	r2, [pc, #64]	@ (8000cdc <BSP_PB_Init+0xd4>)
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f000 fc2c 	bl	8001500 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ca8:	2028      	movs	r0, #40	@ 0x28
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <BSP_PB_Init+0xd8>)
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f000 fa34 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000cba:	2328      	movs	r3, #40	@ 0x28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fa4a 	bl	8001156 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200001a8 	.word	0x200001a8
 8000cd8:	08004138 	.word	0x08004138
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	20000014 	.word	0x20000014

08000ce4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <BSP_PB_IRQHandler+0x20>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fc34 	bl	8001564 <HAL_EXTI_IRQHandler>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001a8 	.word	0x200001a8

08000d08 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d903      	bls.n	8000d3e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d36:	f06f 0301 	mvn.w	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e018      	b.n	8000d70 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2294      	movs	r2, #148	@ 0x94
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <BSP_COM_Init+0x5c>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f852 	bl	8000df4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2294      	movs	r2, #148	@ 0x94
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <BSP_COM_Init+0x5c>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f80e 	bl	8000d80 <MX_LPUART1_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000d6a:	f06f 0303 	mvn.w	r3, #3
 8000d6e:	e000      	b.n	8000d72 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001b0 	.word	0x200001b0

08000d80 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_LPUART1_Init+0x60>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	895b      	ldrh	r3, [r3, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	891b      	ldrh	r3, [r3, #8]
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dcc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f002 fbf8 	bl	80035c4 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000000c 	.word	0x2000000c

08000de4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff8d 	bl	8000d08 <BSP_PB_Callback>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <COM1_MspInit+0x94>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e18:	4a1b      	ldr	r2, [pc, #108]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e30:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <COM1_MspInit+0x94>)
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e44:	2304      	movs	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000e54:	230c      	movs	r3, #12
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f000 fbaf 	bl	80015c4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000e66:	2308      	movs	r3, #8
 8000e68:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f000 fba2 	bl	80015c4 <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f938 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 f80d 	bl	8000ebc <HAL_InitTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	e001      	b.n	8000eb2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eae:	f7ff fd4d 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]

}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_InitTick+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d022      	beq.n	8000f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_InitTick+0x6c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <HAL_InitTick+0x68>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f944 	bl	8001172 <HAL_SYSTICK_Config>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10f      	bne.n	8000f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d809      	bhi.n	8000f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efe:	f000 f910 	bl	8001122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <HAL_InitTick+0x70>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e004      	b.n	8000f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e001      	b.n	8000f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000001c 	.word	0x2000001c
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000018 	.word	0x20000018

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <HAL_IncTick+0x1c>)
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20000244 	.word	0x20000244
 8000f50:	2000001c 	.word	0x2000001c

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000244 	.word	0x20000244

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	@ (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	@ (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff40 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff33 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa4 	bl	80010c8 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e08d      	b.n	80012ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <HAL_DMA_Init+0x138>)
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d80f      	bhi.n	80011ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <HAL_DMA_Init+0x13c>)
 80011b2:	4413      	add	r3, r2
 80011b4:	4a45      	ldr	r2, [pc, #276]	@ (80012cc <HAL_DMA_Init+0x140>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	009a      	lsls	r2, r3, #2
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a42      	ldr	r2, [pc, #264]	@ (80012d0 <HAL_DMA_Init+0x144>)
 80011c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80011c8:	e00e      	b.n	80011e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b40      	ldr	r3, [pc, #256]	@ (80012d4 <HAL_DMA_Init+0x148>)
 80011d2:	4413      	add	r3, r2
 80011d4:	4a3d      	ldr	r2, [pc, #244]	@ (80012cc <HAL_DMA_Init+0x140>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	009a      	lsls	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a3c      	ldr	r2, [pc, #240]	@ (80012d8 <HAL_DMA_Init+0x14c>)
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80011fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001202:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800120c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001218:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001224:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f8fe 	bl	800143c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001248:	d102      	bne.n	8001250 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001264:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d010      	beq.n	8001290 <HAL_DMA_Init+0x104>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d80c      	bhi.n	8001290 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f91e 	bl	80014b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	e008      	b.n	80012a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020407 	.word	0x40020407
 80012c8:	bffdfff8 	.word	0xbffdfff8
 80012cc:	cccccccd 	.word	0xcccccccd
 80012d0:	40020000 	.word	0x40020000
 80012d4:	bffdfbf8 	.word	0xbffdfbf8
 80012d8:	40020400 	.word	0x40020400

080012dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	2204      	movs	r2, #4
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d026      	beq.n	8001356 <HAL_DMA_IRQHandler+0x7a>
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d021      	beq.n	8001356 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0204 	bic.w	r2, r2, #4
 800132e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	2104      	movs	r1, #4
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	2b00      	cmp	r3, #0
 800134a:	d071      	beq.n	8001430 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001354:	e06c      	b.n	8001430 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	2202      	movs	r2, #2
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02e      	beq.n	80013c8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d029      	beq.n	80013c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10b      	bne.n	800139a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 020a 	bic.w	r2, r2, #10
 8001390:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f003 021f 	and.w	r2, r3, #31
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	2102      	movs	r1, #2
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d038      	beq.n	8001430 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013c6:	e033      	b.n	8001430 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2208      	movs	r2, #8
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d02a      	beq.n	8001432 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d025      	beq.n	8001432 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 020e 	bic.w	r2, r2, #14
 80013f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f003 021f 	and.w	r2, r3, #31
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001430:	bf00      	nop
 8001432:	bf00      	nop
}
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800144c:	429a      	cmp	r2, r3
 800144e:	d802      	bhi.n	8001456 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e001      	b.n	800145a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001458:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3b08      	subs	r3, #8
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	009a      	lsls	r2, r3, #2
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001486:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40020407 	.word	0x40020407
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020820 	.word	0x40020820
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	40020880 	.word	0x40020880

080014b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014da:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	2201      	movs	r2, #1
 80014e6:	409a      	lsls	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	1000823f 	.word	0x1000823f
 80014fc:	40020940 	.word	0x40020940

08001500 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	460b      	mov	r3, r1
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	605a      	str	r2, [r3, #4]
      break;
 800151e:	e005      	b.n	800152c <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
      break;
 800152a:	bf00      	nop
  }

  return status;
 800152c:	7dfb      	ldrb	r3, [r7, #23]
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e003      	b.n	8001556 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_EXTI_IRQHandler+0x5c>)
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4798      	blx	r3
    }
  }
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010414 	.word	0x40010414

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015d2:	e15a      	b.n	800188a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 814c 	beq.w	8001884 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 0201 	and.w	r2, r3, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d017      	beq.n	80016a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d123      	bne.n	80016f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0203 	and.w	r2, r3, #3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a6 	beq.w	8001884 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	4b5b      	ldr	r3, [pc, #364]	@ (80018a8 <HAL_GPIO_Init+0x2e4>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173c:	4a5a      	ldr	r2, [pc, #360]	@ (80018a8 <HAL_GPIO_Init+0x2e4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6613      	str	r3, [r2, #96]	@ 0x60
 8001744:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_GPIO_Init+0x2e4>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001750:	4a56      	ldr	r2, [pc, #344]	@ (80018ac <HAL_GPIO_Init+0x2e8>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800177a:	d01f      	beq.n	80017bc <HAL_GPIO_Init+0x1f8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_GPIO_Init+0x2ec>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d019      	beq.n	80017b8 <HAL_GPIO_Init+0x1f4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <HAL_GPIO_Init+0x2f0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x1f0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4a      	ldr	r2, [pc, #296]	@ (80018b8 <HAL_GPIO_Init+0x2f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1ec>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a49      	ldr	r2, [pc, #292]	@ (80018bc <HAL_GPIO_Init+0x2f8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1e8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <HAL_GPIO_Init+0x2fc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1e4>
 80017a4:	2305      	movs	r3, #5
 80017a6:	e00a      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017a8:	2306      	movs	r3, #6
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1fa>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ce:	4937      	ldr	r1, [pc, #220]	@ (80018ac <HAL_GPIO_Init+0x2e8>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017dc:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001800:	4a30      	ldr	r2, [pc, #192]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001806:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182a:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001854:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187e:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f ae9d 	bne.w	80015d4 <HAL_GPIO_Init+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	48001400 	.word	0x48001400
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0be      	b.n	8001a88 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02e      	beq.n	80019b4 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a90 <HAL_HRTIM_Init+0x198>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10b      	bne.n	8001978 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <HAL_HRTIM_Init+0x19c>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_HRTIM_Init+0x19c>)
 8001966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800196a:	6613      	str	r3, [r2, #96]	@ 0x60
 800196c:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <HAL_HRTIM_Init+0x19c>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001970:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001986:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800199c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe ffed 	bl	8000994 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e03e      	b.n	8001a80 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001a02:	7dfa      	ldrb	r2, [r7, #23]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3318      	adds	r3, #24
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001a16:	7dfa      	ldrb	r2, [r7, #23]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	331c      	adds	r3, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001a2a:	7dfa      	ldrb	r2, [r7, #23]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3320      	adds	r3, #32
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001a3e:	7dfa      	ldrb	r2, [r7, #23]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3324      	adds	r3, #36	@ 0x24
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001a52:	7dfa      	ldrb	r2, [r7, #23]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3328      	adds	r3, #40	@ 0x28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001a66:	7dfa      	ldrb	r2, [r7, #23]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3330      	adds	r3, #48	@ 0x30
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d9bd      	bls.n	8001a02 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40016800 	.word	0x40016800
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e045      	b.n	8001b3c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ac6:	d114      	bne.n	8001af2 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0202 	bic.w	r2, r2, #2
 8001ad8:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8001af0:	e01f      	b.n	8001b32 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0202 	orr.w	r2, r2, #2
 8001b02:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8001b0e:	f023 010c 	bic.w	r1, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8001b52:	f7ff f9ff 	bl	8000f54 <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001b58:	e014      	b.n	8001b84 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b60:	d010      	beq.n	8001b84 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b62:	f7ff f9f7 	bl	8000f54 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d302      	bcc.n	8001b78 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e011      	b.n	8001ba8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b94:	d1e1      	bne.n	8001b5a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d101      	bne.n	8001bcc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e015      	b.n	8001bf8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d104      	bne.n	8001be4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fac6 	bl	800216e <HRTIM_MasterBase_Config>
 8001be2:	e004      	b.n	8001bee <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 faef 	bl	80021cc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d101      	bne.n	8001c1c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e07a      	b.n	8001d12 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e073      	b.n	8001d12 <HAL_HRTIM_WaveformTimerConfig+0x112>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d104      	bne.n	8001c4a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 fb02 	bl	800224c <HRTIM_MasterWaveform_Config>
 8001c48:	e004      	b.n	8001c54 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fb9a 	bl	8002388 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4403      	add	r3, r0
 8001c66:	3320      	adds	r3, #32
 8001c68:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4403      	add	r3, r0
 8001c7c:	3324      	adds	r3, #36	@ 0x24
 8001c7e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4403      	add	r3, r0
 8001c92:	3328      	adds	r3, #40	@ 0x28
 8001c94:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68d9      	ldr	r1, [r3, #12]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	332c      	adds	r3, #44	@ 0x2c
 8001caa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6919      	ldr	r1, [r3, #16]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3330      	adds	r3, #48	@ 0x30
 8001cc0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fe2d 	bl	8002924 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	d017      	beq.n	8001d00 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d113      	bne.n	8001d00 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	4413      	add	r3, r2
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	440b      	add	r3, r1
 8001cfe:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d101      	bne.n	8001d36 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e020      	b.n	8001d78 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e019      	b.n	8001d78 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fc9b 	bl	8002694 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fddf 	bl	8002924 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d101      	bne.n	8001d9e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e157      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e150      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d140      	bne.n	8001e44 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d82a      	bhi.n	8001e20 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001df1 	.word	0x08001df1
 8001dd4:	08001dfd 	.word	0x08001dfd
 8001dd8:	08001e21 	.word	0x08001e21
 8001ddc:	08001e09 	.word	0x08001e09
 8001de0:	08001e21 	.word	0x08001e21
 8001de4:	08001e21 	.word	0x08001e21
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e15 	.word	0x08001e15
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	61da      	str	r2, [r3, #28]
        break;
 8001dfa:	e01a      	b.n	8001e32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8001e06:	e014      	b.n	8001e32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8001e12:	e00e      	b.n	8001e32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8001e1e:	e008      	b.n	8001e32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2207      	movs	r2, #7
 8001e24:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8001e30:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b07      	cmp	r3, #7
 8001e3c:	f040 80fe 	bne.w	800203c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e104      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	f200 80e3 	bhi.w	8002014 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8001e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e75 	.word	0x08001e75
 8001e58:	08001e89 	.word	0x08001e89
 8001e5c:	08002015 	.word	0x08002015
 8001e60:	08001f45 	.word	0x08001f45
 8001e64:	08002015 	.word	0x08002015
 8001e68:	08002015 	.word	0x08002015
 8001e6c:	08002015 	.word	0x08002015
 8001e70:	08001f59 	.word	0x08001f59
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6819      	ldr	r1, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	01db      	lsls	r3, r3, #7
 8001e80:	440b      	add	r3, r1
 8001e82:	339c      	adds	r3, #156	@ 0x9c
 8001e84:	601a      	str	r2, [r3, #0]
        break;
 8001e86:	e0d1      	b.n	800202c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	01db      	lsls	r3, r3, #7
 8001e94:	440b      	add	r3, r1
 8001e96:	33a4      	adds	r3, #164	@ 0xa4
 8001e98:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03f      	beq.n	8001f22 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	01db      	lsls	r3, r3, #7
 8001ebe:	440b      	add	r3, r1
 8001ec0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	6809      	ldr	r1, [r1, #0]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3301      	adds	r3, #1
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	440b      	add	r3, r1
 8001ee2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eec:	d109      	bne.n	8001f02 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	440b      	add	r3, r1
 8001efc:	339c      	adds	r3, #156	@ 0x9c
 8001efe:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8001f00:	e091      	b.n	8002026 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f0a:	f040 808c 	bne.w	8002026 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	01db      	lsls	r3, r3, #7
 8001f1a:	440b      	add	r3, r1
 8001f1c:	33a8      	adds	r3, #168	@ 0xa8
 8001f1e:	601a      	str	r2, [r3, #0]
        break;
 8001f20:	e081      	b.n	8002026 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	4413      	add	r3, r2
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6811      	ldr	r1, [r2, #0]
 8001f34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	440b      	add	r3, r1
 8001f40:	601a      	str	r2, [r3, #0]
        break;
 8001f42:	e070      	b.n	8002026 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	440b      	add	r3, r1
 8001f52:	33a8      	adds	r3, #168	@ 0xa8
 8001f54:	601a      	str	r2, [r3, #0]
        break;
 8001f56:	e069      	b.n	800202c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	440b      	add	r3, r1
 8001f66:	33ac      	adds	r3, #172	@ 0xac
 8001f68:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03f      	beq.n	8001ff2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	01db      	lsls	r3, r3, #7
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6811      	ldr	r1, [r2, #0]
 8001f84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	01db      	lsls	r3, r3, #7
 8001f8e:	440b      	add	r3, r1
 8001f90:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	01db      	lsls	r3, r3, #7
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	6809      	ldr	r1, [r1, #0]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	01db      	lsls	r3, r3, #7
 8001fb2:	440b      	add	r3, r1
 8001fb4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fbe:	d109      	bne.n	8001fd4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	440b      	add	r3, r1
 8001fce:	339c      	adds	r3, #156	@ 0x9c
 8001fd0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8001fd2:	e02a      	b.n	800202a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001fdc:	d125      	bne.n	800202a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	01db      	lsls	r3, r3, #7
 8001fea:	440b      	add	r3, r1
 8001fec:	33a8      	adds	r3, #168	@ 0xa8
 8001fee:	601a      	str	r2, [r3, #0]
        break;
 8001ff0:	e01b      	b.n	800202a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	01db      	lsls	r3, r3, #7
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6811      	ldr	r1, [r2, #0]
 8002004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3301      	adds	r3, #1
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	440b      	add	r3, r1
 8002010:	601a      	str	r2, [r3, #0]
        break;
 8002012:	e00a      	b.n	800202a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2207      	movs	r2, #7
 8002018:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8002024:	e002      	b.n	800202c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800202a:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b07      	cmp	r3, #7
 8002036:	d101      	bne.n	800203c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e008      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d101      	bne.n	800207a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	e01d      	b.n	80020b6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002084:	2302      	movs	r3, #2
 8002086:	e016      	b.n	80020b6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fb58 	bl	8002754 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_HRTIM_WaveformOutputStart+0x18>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01a      	b.n	800210c <HAL_HRTIM_WaveformOutputStart+0x4e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_HRTIM_WaveformCountStart+0x18>
 800212c:	2302      	movs	r3, #2
 800212e:	e018      	b.n	8002162 <HAL_HRTIM_WaveformCountStart+0x4a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0307 	bic.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f023 0318 	bic.w	r3, r3, #24
 8002198:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6852      	ldr	r2, [r2, #4]
 80021be:	619a      	str	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	01db      	lsls	r3, r3, #7
 80021e2:	4413      	add	r3, r2
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 0318 	bic.w	r3, r3, #24
 8002200:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3301      	adds	r3, #1
 8002214:	01db      	lsls	r3, r3, #7
 8002216:	4413      	add	r3, r2
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	01db      	lsls	r3, r3, #7
 8002228:	440b      	add	r3, r1
 800222a:	3394      	adds	r3, #148	@ 0x94
 800222c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	01db      	lsls	r3, r3, #7
 800223a:	440b      	add	r3, r1
 800223c:	3398      	adds	r3, #152	@ 0x98
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002266:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0320 	bic.w	r3, r3, #32
 800226e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002280:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b20      	cmp	r3, #32
 8002288:	d003      	beq.n	8002292 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d108      	bne.n	80022a4 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002298:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e021      	b.n	80022e8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d108      	bne.n	80022be <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e014      	b.n	80022e8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d108      	bne.n	80022d8 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022cc:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e007      	b.n	80022e8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0320 	bic.w	r3, r3, #32
 80022de:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002300:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002312:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002324:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002336:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800234a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8002388:	b480      	push	{r7}
 800238a:	b08b      	sub	sp, #44	@ 0x2c
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	3301      	adds	r3, #1
 800239c:	01db      	lsls	r3, r3, #7
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3301      	adds	r3, #1
 80023ae:	01db      	lsls	r3, r3, #7
 80023b0:	440b      	add	r3, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	01db      	lsls	r3, r3, #7
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	01db      	lsls	r3, r3, #7
 80023cc:	4413      	add	r3, r2
 80023ce:	33e8      	adds	r3, #232	@ 0xe8
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	01db      	lsls	r3, r3, #7
 80023dc:	4413      	add	r3, r2
 80023de:	33e4      	adds	r3, #228	@ 0xe4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80023ec:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	f023 0320 	bic.w	r3, r3, #32
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	4313      	orrs	r3, r2
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	2b20      	cmp	r3, #32
 8002406:	d003      	beq.n	8002410 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d108      	bne.n	8002422 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002420:	e021      	b.n	8002466 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d108      	bne.n	800243c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	e014      	b.n	8002466 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d108      	bne.n	8002456 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
 8002454:	e007      	b.n	8002466 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f023 0320 	bic.w	r3, r3, #32
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002474:	4313      	orrs	r3, r2
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002486:	4313      	orrs	r3, r2
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	4313      	orrs	r3, r2
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024aa:	4313      	orrs	r3, r2
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	4313      	orrs	r3, r2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024d0:	d103      	bne.n	80024da <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	4313      	orrs	r3, r2
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	4313      	orrs	r3, r2
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8002504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002510:	4313      	orrs	r3, r2
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800251a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002530:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002542:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	4313      	orrs	r3, r2
 800254c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002552:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8002556:	d004      	beq.n	8002562 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8002560:	d103      	bne.n	800256a <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d108      	bne.n	800257c <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8002570:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	6a3a      	ldr	r2, [r7, #32]
 8002578:	4313      	orrs	r3, r2
 800257a:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002582:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	4313      	orrs	r3, r2
 800258c:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d850      	bhi.n	800263c <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HRTIM_TimingUnitWaveform_Config+0x218>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b9 	.word	0x080025b9
 80025a4:	080025cf 	.word	0x080025cf
 80025a8:	080025e5 	.word	0x080025e5
 80025ac:	080025fb 	.word	0x080025fb
 80025b0:	08002611 	.word	0x08002611
 80025b4:	08002627 	.word	0x08002627
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80025be:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
      break;
 80025cc:	e037      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61fb      	str	r3, [r7, #28]
      break;
 80025e2:	e02c      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80025ea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
      break;
 80025f8:	e021      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002600:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]
      break;
 800260e:	e016      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002616:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	015b      	lsls	r3, r3, #5
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	4313      	orrs	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
      break;
 8002624:	e00b      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800262c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	019b      	lsls	r3, r3, #6
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	4313      	orrs	r3, r2
 8002638:	61fb      	str	r3, [r7, #28]
      break;
 800263a:	e000      	b.n	800263e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 800263c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4413      	add	r3, r2
 800264a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	4413      	add	r3, r2
 8002658:	33e8      	adds	r3, #232	@ 0xe8
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	01db      	lsls	r3, r3, #7
 8002666:	4413      	add	r3, r2
 8002668:	33e4      	adds	r3, #228	@ 0xe4
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	4413      	add	r3, r2
 8002678:	33d4      	adds	r3, #212	@ 0xd4
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8002688:	bf00      	nop
 800268a:	372c      	adds	r7, #44	@ 0x2c
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	4413      	add	r3, r2
 80026aa:	33ec      	adds	r3, #236	@ 0xec
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0310 	bic.w	r3, r3, #16
 80026b6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026ca:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026dc:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80026ee:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d11a      	bne.n	8002738 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0302 	bic.w	r3, r3, #2
 800271a:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	01db      	lsls	r3, r3, #7
 8002740:	4413      	add	r3, r2
 8002742:	33ec      	adds	r3, #236	@ 0xec
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]

}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	01db      	lsls	r3, r3, #7
 800276e:	4413      	add	r3, r2
 8002770:	33e4      	adds	r3, #228	@ 0xe4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	01db      	lsls	r3, r3, #7
 800277e:	4413      	add	r3, r2
 8002780:	33b8      	adds	r3, #184	@ 0xb8
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	617b      	str	r3, [r7, #20]

  switch (Output)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800278c:	d05d      	beq.n	800284a <HRTIM_OutputConfig+0xf6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002794:	d86e      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279c:	d042      	beq.n	8002824 <HRTIM_OutputConfig+0xd0>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a4:	d866      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ac:	d04d      	beq.n	800284a <HRTIM_OutputConfig+0xf6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b4:	d85e      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027bc:	d032      	beq.n	8002824 <HRTIM_OutputConfig+0xd0>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c4:	d856      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d03e      	beq.n	800284a <HRTIM_OutputConfig+0xf6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b80      	cmp	r3, #128	@ 0x80
 80027d0:	d850      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b40      	cmp	r3, #64	@ 0x40
 80027d6:	d025      	beq.n	8002824 <HRTIM_OutputConfig+0xd0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d84a      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d01f      	beq.n	8002824 <HRTIM_OutputConfig+0xd0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d044      	beq.n	8002874 <HRTIM_OutputConfig+0x120>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d841      	bhi.n	8002874 <HRTIM_OutputConfig+0x120>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d33e      	bcc.n	8002874 <HRTIM_OutputConfig+0x120>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3b02      	subs	r3, #2
 80027fa:	2201      	movs	r2, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	4b48      	ldr	r3, [pc, #288]	@ (8002920 <HRTIM_OutputConfig+0x1cc>)
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11c      	bne.n	800284a <HRTIM_OutputConfig+0xf6>
 8002810:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d027      	beq.n	8002874 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	01db      	lsls	r3, r3, #7
 8002830:	440b      	add	r3, r1
 8002832:	33bc      	adds	r3, #188	@ 0xbc
 8002834:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	440b      	add	r3, r1
 8002844:	33c0      	adds	r3, #192	@ 0xc0
 8002846:	601a      	str	r2, [r3, #0]
      break;
 8002848:	e015      	b.n	8002876 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	01db      	lsls	r3, r3, #7
 8002856:	440b      	add	r3, r1
 8002858:	33c4      	adds	r3, #196	@ 0xc4
 800285a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	01db      	lsls	r3, r3, #7
 8002868:	440b      	add	r3, r1
 800286a:	33c8      	adds	r3, #200	@ 0xc8
 800286c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800286e:	2310      	movs	r3, #16
 8002870:	61bb      	str	r3, [r7, #24]
      break;
 8002872:	e000      	b.n	8002876 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8002874:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8002876:	22fe      	movs	r2, #254	@ 0xfe
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800287e:	43db      	mvns	r3, r3
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	4013      	ands	r3, r2
 8002884:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	4313      	orrs	r3, r2
 8002894:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d111      	bne.n	8002902 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10c      	bne.n	8002902 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	01db      	lsls	r3, r3, #7
 800290a:	4413      	add	r3, r2
 800290c:	33e4      	adds	r3, #228	@ 0xe4
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40000041 	.word	0x40000041

08002924 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d85e      	bhi.n	80029f2 <HRTIM_ForceRegistersUpdate+0xce>
 8002934:	a201      	add	r2, pc, #4	@ (adr r2, 800293c <HRTIM_ForceRegistersUpdate+0x18>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800296f 	.word	0x0800296f
 8002940:	08002985 	.word	0x08002985
 8002944:	0800299b 	.word	0x0800299b
 8002948:	080029b1 	.word	0x080029b1
 800294c:	080029c7 	.word	0x080029c7
 8002950:	080029dd 	.word	0x080029dd
 8002954:	08002959 	.word	0x08002959
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800296c:	e042      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0202 	orr.w	r2, r2, #2
 800297e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002982:	e037      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0204 	orr.w	r2, r2, #4
 8002994:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002998:	e02c      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0208 	orr.w	r2, r2, #8
 80029aa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80029ae:	e021      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0210 	orr.w	r2, r2, #16
 80029c0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80029c4:	e016      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80029da:	e00b      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ec:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80029f0:	e000      	b.n	80029f4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 80029f2:	bf00      	nop
  }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d141      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1a:	d131      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a1c:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a22:	4a46      	ldr	r2, [pc, #280]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a2c:	4b43      	ldr	r3, [pc, #268]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a34:	4a41      	ldr	r2, [pc, #260]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a3c:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2232      	movs	r2, #50	@ 0x32
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a52:	e002      	b.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5a:	4b38      	ldr	r3, [pc, #224]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a66:	d102      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f2      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a6e:	4b33      	ldr	r3, [pc, #204]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d158      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e057      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a80:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a86:	4a2d      	ldr	r2, [pc, #180]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a90:	e04d      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a98:	d141      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa6:	d131      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aae:	4a23      	ldr	r2, [pc, #140]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab8:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2232      	movs	r2, #50	@ 0x32
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ade:	e002      	b.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af2:	d102      	bne.n	8002afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f2      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d112      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e011      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b12:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b1c:	e007      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	20000000 	.word	0x20000000
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b56:	6093      	str	r3, [r2, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40007000 	.word	0x40007000

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e2fe      	b.n	8003178 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b97      	ldr	r3, [pc, #604]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b94      	ldr	r3, [pc, #592]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3e>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b8d      	ldr	r3, [pc, #564]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e2d9      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b85      	ldr	r3, [pc, #532]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a84      	ldr	r2, [pc, #528]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7e      	ldr	r2, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7b      	ldr	r2, [pc, #492]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b78      	ldr	r3, [pc, #480]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a77      	ldr	r2, [pc, #476]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a74      	ldr	r2, [pc, #464]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f998 	bl	8000f54 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe f994 	bl	8000f54 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e29e      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f984 	bl	8000f54 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe f980 	bl	8000f54 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e28a      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c62:	4b60      	ldr	r3, [pc, #384]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b59      	ldr	r3, [pc, #356]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b56      	ldr	r3, [pc, #344]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x136>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x13c>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11f      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_OscConfig+0x154>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e25d      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	4946      	ldr	r1, [pc, #280]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cd0:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe f8f1 	bl	8000ebc <HAL_InitTick>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d043      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e249      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f92c 	bl	8000f54 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d00:	f7fe f928 	bl	8000f54 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e232      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d12:	4b34      	ldr	r3, [pc, #208]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b31      	ldr	r3, [pc, #196]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	492d      	ldr	r1, [pc, #180]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
 8002d32:	e01a      	b.n	8002d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe f908 	bl	8000f54 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe f904 	bl	8000f54 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e20e      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1e0>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d041      	beq.n	8002dfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d84:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f8e1 	bl	8000f54 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe f8dd 	bl	8000f54 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1e7      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da8:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ef      	beq.n	8002d96 <HAL_RCC_OscConfig+0x22e>
 8002db6:	e020      	b.n	8002dfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe f8c4 	bl	8000f54 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dce:	e00d      	b.n	8002dec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f8c0 	bl	8000f54 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d906      	bls.n	8002dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1ca      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dec:	4b8c      	ldr	r3, [pc, #560]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ea      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a6 	beq.w	8002f54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e0c:	4b84      	ldr	r3, [pc, #528]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2b4>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x2b6>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b7f      	ldr	r3, [pc, #508]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	4a7e      	ldr	r2, [pc, #504]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b79      	ldr	r3, [pc, #484]	@ (8003024 <HAL_RCC_OscConfig+0x4bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4a:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <HAL_RCC_OscConfig+0x4bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x4bc>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7fe f87d 	bl	8000f54 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe f879 	bl	8000f54 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e183      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b6c      	ldr	r3, [pc, #432]	@ (8003024 <HAL_RCC_OscConfig+0x4bc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d108      	bne.n	8002e96 <HAL_RCC_OscConfig+0x32e>
 8002e84:	4b66      	ldr	r3, [pc, #408]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e94:	e024      	b.n	8002ee0 <HAL_RCC_OscConfig+0x378>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d110      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x358>
 8002e9e:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eae:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebe:	e00f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x378>
 8002ec0:	4b57      	ldr	r3, [pc, #348]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a56      	ldr	r2, [pc, #344]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed0:	4b53      	ldr	r3, [pc, #332]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	4a52      	ldr	r2, [pc, #328]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe f834 	bl	8000f54 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f830 	bl	8000f54 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e138      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b46      	ldr	r3, [pc, #280]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ed      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x388>
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe f81d 	bl	8000f54 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe f819 	bl	8000f54 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e121      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f34:	4b3a      	ldr	r3, [pc, #232]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ed      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4b35      	ldr	r3, [pc, #212]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	4a34      	ldr	r2, [pc, #208]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03c      	beq.n	8002fda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f68:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fd ffec 	bl	8000f54 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f80:	f7fd ffe8 	bl	8000f54 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0f2      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f92:	4b23      	ldr	r3, [pc, #140]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCC_OscConfig+0x418>
 8002fa0:	e01b      	b.n	8002fda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fd ffcf 	bl	8000f54 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fba:	f7fd ffcb 	bl	8000f54 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0d5      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80c9 	beq.w	8003176 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f000 8083 	beq.w	80030f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d15e      	bne.n	80030b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a08      	ldr	r2, [pc, #32]	@ (8003020 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fd ffa5 	bl	8000f54 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300c:	e00c      	b.n	8003028 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd ffa1 	bl	8000f54 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d905      	bls.n	8003028 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0ab      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003028:	4b55      	ldr	r3, [pc, #340]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ec      	bne.n	800300e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003034:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b52      	ldr	r3, [pc, #328]	@ (8003184 <HAL_RCC_OscConfig+0x61c>)
 800303a:	4013      	ands	r3, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6a11      	ldr	r1, [r2, #32]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003044:	3a01      	subs	r2, #1
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800304e:	0212      	lsls	r2, r2, #8
 8003050:	4311      	orrs	r1, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0552      	lsls	r2, r2, #21
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0652      	lsls	r2, r2, #25
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800306e:	06d2      	lsls	r2, r2, #27
 8003070:	430a      	orrs	r2, r1
 8003072:	4943      	ldr	r1, [pc, #268]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003078:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a40      	ldr	r2, [pc, #256]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003084:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a3d      	ldr	r2, [pc, #244]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800308e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fd ff60 	bl	8000f54 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7fd ff5c 	bl	8000f54 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e066      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030aa:	4b35      	ldr	r3, [pc, #212]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x530>
 80030b6:	e05e      	b.n	8003176 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a30      	ldr	r2, [pc, #192]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd ff46 	bl	8000f54 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fd ff42 	bl	8000f54 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04c      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030de:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030ea:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4924      	ldr	r1, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_OscConfig+0x620>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60cb      	str	r3, [r1, #12]
 80030f6:	e03e      	b.n	8003176 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e039      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_OscConfig+0x618>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	429a      	cmp	r2, r3
 8003116:	d12c      	bne.n	8003172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d123      	bne.n	8003172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d11b      	bne.n	8003172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d113      	bne.n	8003172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d109      	bne.n	8003172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	019f800c 	.word	0x019f800c
 8003188:	feeefffc 	.word	0xfeeefffc

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e11e      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b91      	ldr	r3, [pc, #580]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b8e      	ldr	r3, [pc, #568]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	498c      	ldr	r1, [pc, #560]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b8a      	ldr	r3, [pc, #552]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e106      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d073      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d129      	bne.n	800323c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e8:	4b81      	ldr	r3, [pc, #516]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0f4      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031f8:	f000 f99e 	bl	8003538 <RCC_GetSysClockFreqFromPLLSource>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4a7c      	ldr	r2, [pc, #496]	@ (80033f4 <HAL_RCC_ClockConfig+0x268>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d93f      	bls.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003206:	4b7a      	ldr	r3, [pc, #488]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d033      	beq.n	8003286 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	d12f      	bne.n	8003286 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003226:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800322e:	4a70      	ldr	r2, [pc, #448]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003234:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e024      	b.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003244:	4b6a      	ldr	r3, [pc, #424]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0c6      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0be      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003264:	f000 f8ce 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8003268:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4a61      	ldr	r2, [pc, #388]	@ (80033f4 <HAL_RCC_ClockConfig+0x268>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d909      	bls.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003272:	4b5f      	ldr	r3, [pc, #380]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800327a:	4a5d      	ldr	r2, [pc, #372]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003280:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4957      	ldr	r1, [pc, #348]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd fe5c 	bl	8000f54 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fd fe58 	bl	8000f54 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e095      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b4e      	ldr	r3, [pc, #312]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b43      	ldr	r3, [pc, #268]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a42      	ldr	r2, [pc, #264]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032f8:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003300:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003302:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b39      	ldr	r3, [pc, #228]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	e008      	b.n	800332e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d105      	bne.n	800332e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003322:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800332c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4b2f      	ldr	r3, [pc, #188]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d21d      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 020f 	bic.w	r2, r3, #15
 8003344:	4929      	ldr	r1, [pc, #164]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800334c:	f7fd fe02 	bl	8000f54 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd fdfe 	bl	8000f54 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e03b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	@ (80033ec <HAL_RCC_ClockConfig+0x260>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d1ed      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b1a      	ldr	r3, [pc, #104]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4917      	ldr	r1, [pc, #92]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490f      	ldr	r1, [pc, #60]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b6:	f000 f825 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490c      	ldr	r1, [pc, #48]	@ (80033f8 <HAL_RCC_ClockConfig+0x26c>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <HAL_RCC_ClockConfig+0x270>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_RCC_ClockConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fd6e 	bl	8000ebc <HAL_InitTick>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	04c4b400 	.word	0x04c4b400
 80033f8:	08004120 	.word	0x08004120
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000018 	.word	0x20000018

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340a:	4b2c      	ldr	r3, [pc, #176]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d102      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003416:	4b2a      	ldr	r3, [pc, #168]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e047      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e03e      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800342e:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d136      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3301      	adds	r3, #1
 8003450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003458:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a16      	ldr	r2, [pc, #88]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003462:	68d2      	ldr	r2, [r2, #12]
 8003464:	0a12      	lsrs	r2, r2, #8
 8003466:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	617b      	str	r3, [r7, #20]
      break;
 8003470:	e00c      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003472:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	4a10      	ldr	r2, [pc, #64]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	0a12      	lsrs	r2, r2, #8
 8003480:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0e5b      	lsrs	r3, r3, #25
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e001      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034ac:	693b      	ldr	r3, [r7, #16]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	016e3600 	.word	0x016e3600

080034c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4904      	ldr	r1, [pc, #16]	@ (8003508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	08004130 	.word	0x08004130

0800350c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003510:	f7ff ffda 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	0adb      	lsrs	r3, r3, #11
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4904      	ldr	r1, [pc, #16]	@ (8003534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	08004130 	.word	0x08004130

08003538 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d10c      	bne.n	8003576 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003566:	68d2      	ldr	r2, [r2, #12]
 8003568:	0a12      	lsrs	r2, r2, #8
 800356a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	617b      	str	r3, [r7, #20]
    break;
 8003574:	e00c      	b.n	8003590 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	4a0e      	ldr	r2, [pc, #56]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003580:	68d2      	ldr	r2, [r2, #12]
 8003582:	0a12      	lsrs	r2, r2, #8
 8003584:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
    break;
 800358e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	0e5b      	lsrs	r3, r3, #25
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035aa:	687b      	ldr	r3, [r7, #4]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40021000 	.word	0x40021000
 80035bc:	016e3600 	.word	0x016e3600
 80035c0:	00f42400 	.word	0x00f42400

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e042      	b.n	800365c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f83b 	bl	8003664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	@ 0x24
 80035f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fb2e 	bl	8003c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f82f 	bl	8003678 <UART_SetConfig>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e01b      	b.n	800365c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fbad 	bl	8003db4 <UART_CheckIdleState>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b08c      	sub	sp, #48	@ 0x30
 800367e:	af00      	add	r7, sp, #0
 8003680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4313      	orrs	r3, r2
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4baa      	ldr	r3, [pc, #680]	@ (8003950 <UART_SetConfig+0x2d8>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003954 <UART_SetConfig+0x2dc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e0:	4313      	orrs	r3, r2
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80036ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f023 010f 	bic.w	r1, r3, #15
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a90      	ldr	r2, [pc, #576]	@ (8003958 <UART_SetConfig+0x2e0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d125      	bne.n	8003768 <UART_SetConfig+0xf0>
 800371c:	4b8f      	ldr	r3, [pc, #572]	@ (800395c <UART_SetConfig+0x2e4>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d81a      	bhi.n	8003760 <UART_SetConfig+0xe8>
 800372a:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <UART_SetConfig+0xb8>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003741 	.word	0x08003741
 8003734:	08003751 	.word	0x08003751
 8003738:	08003749 	.word	0x08003749
 800373c:	08003759 	.word	0x08003759
 8003740:	2301      	movs	r3, #1
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e116      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003748:	2302      	movs	r3, #2
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e112      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003750:	2304      	movs	r3, #4
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e10e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003758:	2308      	movs	r3, #8
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375e:	e10a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003760:	2310      	movs	r3, #16
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e106      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7c      	ldr	r2, [pc, #496]	@ (8003960 <UART_SetConfig+0x2e8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d138      	bne.n	80037e4 <UART_SetConfig+0x16c>
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <UART_SetConfig+0x2e4>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d82d      	bhi.n	80037dc <UART_SetConfig+0x164>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <UART_SetConfig+0x110>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037bd 	.word	0x080037bd
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080037dd 	.word	0x080037dd
 8003794:	080037dd 	.word	0x080037dd
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	080037dd 	.word	0x080037dd
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c2:	e0d8      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e0d4      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d2:	e0d0      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037da:	e0cc      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e2:	e0c8      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003964 <UART_SetConfig+0x2ec>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d125      	bne.n	800383a <UART_SetConfig+0x1c2>
 80037ee:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <UART_SetConfig+0x2e4>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037f8:	2b30      	cmp	r3, #48	@ 0x30
 80037fa:	d016      	beq.n	800382a <UART_SetConfig+0x1b2>
 80037fc:	2b30      	cmp	r3, #48	@ 0x30
 80037fe:	d818      	bhi.n	8003832 <UART_SetConfig+0x1ba>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d00a      	beq.n	800381a <UART_SetConfig+0x1a2>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d814      	bhi.n	8003832 <UART_SetConfig+0x1ba>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <UART_SetConfig+0x19a>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d008      	beq.n	8003822 <UART_SetConfig+0x1aa>
 8003810:	e00f      	b.n	8003832 <UART_SetConfig+0x1ba>
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003818:	e0ad      	b.n	8003976 <UART_SetConfig+0x2fe>
 800381a:	2302      	movs	r3, #2
 800381c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003820:	e0a9      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003822:	2304      	movs	r3, #4
 8003824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003828:	e0a5      	b.n	8003976 <UART_SetConfig+0x2fe>
 800382a:	2308      	movs	r3, #8
 800382c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003830:	e0a1      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003832:	2310      	movs	r3, #16
 8003834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003838:	e09d      	b.n	8003976 <UART_SetConfig+0x2fe>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <UART_SetConfig+0x2f0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d125      	bne.n	8003890 <UART_SetConfig+0x218>
 8003844:	4b45      	ldr	r3, [pc, #276]	@ (800395c <UART_SetConfig+0x2e4>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800384e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003850:	d016      	beq.n	8003880 <UART_SetConfig+0x208>
 8003852:	2bc0      	cmp	r3, #192	@ 0xc0
 8003854:	d818      	bhi.n	8003888 <UART_SetConfig+0x210>
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d00a      	beq.n	8003870 <UART_SetConfig+0x1f8>
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d814      	bhi.n	8003888 <UART_SetConfig+0x210>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <UART_SetConfig+0x1f0>
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d008      	beq.n	8003878 <UART_SetConfig+0x200>
 8003866:	e00f      	b.n	8003888 <UART_SetConfig+0x210>
 8003868:	2300      	movs	r3, #0
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386e:	e082      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e07e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e07a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e076      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388e:	e072      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a35      	ldr	r2, [pc, #212]	@ (800396c <UART_SetConfig+0x2f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d12a      	bne.n	80038f0 <UART_SetConfig+0x278>
 800389a:	4b30      	ldr	r3, [pc, #192]	@ (800395c <UART_SetConfig+0x2e4>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a8:	d01a      	beq.n	80038e0 <UART_SetConfig+0x268>
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ae:	d81b      	bhi.n	80038e8 <UART_SetConfig+0x270>
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b4:	d00c      	beq.n	80038d0 <UART_SetConfig+0x258>
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ba:	d815      	bhi.n	80038e8 <UART_SetConfig+0x270>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <UART_SetConfig+0x250>
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c4:	d008      	beq.n	80038d8 <UART_SetConfig+0x260>
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x270>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ce:	e052      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038d0:	2302      	movs	r3, #2
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	e04e      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038d8:	2304      	movs	r3, #4
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e04a      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038e0:	2308      	movs	r3, #8
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e046      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038e8:	2310      	movs	r3, #16
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e042      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <UART_SetConfig+0x2dc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d13a      	bne.n	8003970 <UART_SetConfig+0x2f8>
 80038fa:	4b18      	ldr	r3, [pc, #96]	@ (800395c <UART_SetConfig+0x2e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003904:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003908:	d01a      	beq.n	8003940 <UART_SetConfig+0x2c8>
 800390a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0x2d0>
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d00c      	beq.n	8003930 <UART_SetConfig+0x2b8>
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800391a:	d815      	bhi.n	8003948 <UART_SetConfig+0x2d0>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <UART_SetConfig+0x2b0>
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003924:	d008      	beq.n	8003938 <UART_SetConfig+0x2c0>
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x2d0>
 8003928:	2300      	movs	r3, #0
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e022      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e01e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e01a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e016      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e012      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003950:	cfff69f3 	.word	0xcfff69f3
 8003954:	40008000 	.word	0x40008000
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40004400 	.word	0x40004400
 8003964:	40004800 	.word	0x40004800
 8003968:	40004c00 	.word	0x40004c00
 800396c:	40005000 	.word	0x40005000
 8003970:	2310      	movs	r3, #16
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4aae      	ldr	r2, [pc, #696]	@ (8003c34 <UART_SetConfig+0x5bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	f040 8097 	bne.w	8003ab0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003982:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003986:	2b08      	cmp	r3, #8
 8003988:	d823      	bhi.n	80039d2 <UART_SetConfig+0x35a>
 800398a:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <UART_SetConfig+0x318>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039c3 	.word	0x080039c3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039d3 	.word	0x080039d3
 80039b0:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff fd94 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 80039b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ba:	e010      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003c38 <UART_SetConfig+0x5c0>)
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039c0:	e00d      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7ff fd1f 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80039c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039c8:	e009      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d0:	e005      	b.n	80039de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8130 	beq.w	8003c46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	4a94      	ldr	r2, [pc, #592]	@ (8003c3c <UART_SetConfig+0x5c4>)
 80039ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d305      	bcc.n	8003a16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d903      	bls.n	8003a1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a1c:	e113      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	2200      	movs	r2, #0
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	60fa      	str	r2, [r7, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	4a84      	ldr	r2, [pc, #528]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a40:	f7fc fbea 	bl	8000218 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	020b      	lsls	r3, r1, #8
 8003a56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a5a:	0202      	lsls	r2, r0, #8
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	6849      	ldr	r1, [r1, #4]
 8003a60:	0849      	lsrs	r1, r1, #1
 8003a62:	2000      	movs	r0, #0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4605      	mov	r5, r0
 8003a68:	eb12 0804 	adds.w	r8, r2, r4
 8003a6c:	eb43 0905 	adc.w	r9, r3, r5
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	469a      	mov	sl, r3
 8003a78:	4693      	mov	fp, r2
 8003a7a:	4652      	mov	r2, sl
 8003a7c:	465b      	mov	r3, fp
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4649      	mov	r1, r9
 8003a82:	f7fc fbc9 	bl	8000218 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a94:	d308      	bcc.n	8003aa8 <UART_SetConfig+0x430>
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a9c:	d204      	bcs.n	8003aa8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e0ce      	b.n	8003c46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003aae:	e0ca      	b.n	8003c46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	d166      	bne.n	8003b88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003aba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d827      	bhi.n	8003b12 <UART_SetConfig+0x49a>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <UART_SetConfig+0x450>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7ff fcf8 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003af2:	e014      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7ff fd0a 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8003af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003afa:	e010      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b4e      	ldr	r3, [pc, #312]	@ (8003c38 <UART_SetConfig+0x5c0>)
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7ff fc7f 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8003b06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b08:	e009      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b10:	e005      	b.n	8003b1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8090 	beq.w	8003c46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	4a44      	ldr	r2, [pc, #272]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b38:	005a      	lsls	r2, r3, #1
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	441a      	add	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d916      	bls.n	8003b80 <UART_SetConfig+0x508>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d212      	bcs.n	8003b80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f023 030f 	bic.w	r3, r3, #15
 8003b62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	8bfb      	ldrh	r3, [r7, #30]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	8bfa      	ldrh	r2, [r7, #30]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e062      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b86:	e05e      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d828      	bhi.n	8003be2 <UART_SetConfig+0x56a>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <UART_SetConfig+0x520>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bc5 	.word	0x08003bc5
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003be3 	.word	0x08003be3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003be3 	.word	0x08003be3
 8003bb4:	08003be3 	.word	0x08003be3
 8003bb8:	08003bdb 	.word	0x08003bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7ff fc90 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc2:	e014      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7ff fca2 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8003bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bca:	e010      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <UART_SetConfig+0x5c0>)
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bd0:	e00d      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7ff fc17 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8003bd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bd8:	e009      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003be0:	e005      	b.n	8003bee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bec:	bf00      	nop
    }

    if (pclk != 0U)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	441a      	add	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d910      	bls.n	8003c40 <UART_SetConfig+0x5c8>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d20c      	bcs.n	8003c40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	e009      	b.n	8003c46 <UART_SetConfig+0x5ce>
 8003c32:	bf00      	nop
 8003c34:	40008000 	.word	0x40008000
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	0800413c 	.word	0x0800413c
      }
      else
      {
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3730      	adds	r7, #48	@ 0x30
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6e:	d10a      	bne.n	8003d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b098      	sub	sp, #96	@ 0x60
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc4:	f7fd f8c6 	bl	8000f54 <HAL_GetTick>
 8003dc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d12f      	bne.n	8003e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f88e 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d022      	beq.n	8003e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e063      	b.n	8003f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d149      	bne.n	8003eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f857 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e012      	b.n	8003f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3758      	adds	r7, #88	@ 0x58
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f18:	e04f      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f20:	d04b      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fd f817 	bl	8000f54 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e04e      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d037      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b80      	cmp	r3, #128	@ 0x80
 8003f4e:	d034      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d031      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d110      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f838 	bl	8003fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2208      	movs	r2, #8
 8003f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e029      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f94:	d111      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f81e 	bl	8003fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d0a0      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b095      	sub	sp, #84	@ 0x54
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004008:	643b      	str	r3, [r7, #64]	@ 0x40
 800400a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	61fb      	str	r3, [r7, #28]
   return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004040:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e3      	bne.n	800401c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d118      	bne.n	800408e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	60bb      	str	r3, [r7, #8]
   return(result);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	613b      	str	r3, [r7, #16]
   return(result);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e6      	bne.n	800405c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040a2:	bf00      	nop
 80040a4:	3754      	adds	r7, #84	@ 0x54
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <memset>:
 80040ae:	4402      	add	r2, r0
 80040b0:	4603      	mov	r3, r0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d100      	bne.n	80040b8 <memset+0xa>
 80040b6:	4770      	bx	lr
 80040b8:	f803 1b01 	strb.w	r1, [r3], #1
 80040bc:	e7f9      	b.n	80040b2 <memset+0x4>
	...

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4d0d      	ldr	r5, [pc, #52]	@ (80040f8 <__libc_init_array+0x38>)
 80040c4:	4c0d      	ldr	r4, [pc, #52]	@ (80040fc <__libc_init_array+0x3c>)
 80040c6:	1b64      	subs	r4, r4, r5
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	2600      	movs	r6, #0
 80040cc:	42a6      	cmp	r6, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004100 <__libc_init_array+0x40>)
 80040d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004104 <__libc_init_array+0x44>)
 80040d4:	f000 f818 	bl	8004108 <_init>
 80040d8:	1b64      	subs	r4, r4, r5
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	2600      	movs	r6, #0
 80040de:	42a6      	cmp	r6, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e8:	4798      	blx	r3
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f2:	4798      	blx	r3
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	0800415c 	.word	0x0800415c
 80040fc:	0800415c 	.word	0x0800415c
 8004100:	0800415c 	.word	0x0800415c
 8004104:	08004160 	.word	0x08004160

08004108 <_init>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr

08004114 <_fini>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr
